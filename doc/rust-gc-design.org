#+title: Notes on the design of Neptune, our Rust GC
#+author: Mehmet Emre and Michael Christensen
#+options: html-postamble:nil

* First GC implementation
  1. ∀ threads, get roots & mark
    a. create a get_frames() function
    b. create functions: get/set_markbit for the tagged values
    c. need to also expose C-side global thread list 
      -- This is in threading.c, "jl_ptls_t *jl_all_tls_states"
  2. ∀ objects in finalizer list, call finalizers
  3. ∀ regions. ∀ pages. sweep
  4. ∀ threads. ∀ big objects. sweep
    a. implement and call root_free?
* Other related to GC:
  1. work on thread destruction

* Notes on differing data structures:
** Mark stack
   Julia GC has a single mark stack that it uses for marking. This is OK since Julia GC is effectively single-threaded. Neptune has one mark stack per Julia thread in thread-local state (TLS).
** Thread pool
   Neptune has a thread pool to parallelize sweeping.
