#+title: Tentative roadmap of the project
#+author: Mehmet Emre

* Link Neptune and Julia
- [X] Modify the Makefiles to link Neptune and Julia, then test it by calling some simple stub in Rust side from C to see that it doesn't crash.
- [X] Fix Michael's build...
      Currently I'm having trouble running 'make debug' from within the 'julia'
      directory. When it tries building usr/lib/julia/inference.ji, it segfaults
      after printing the statements in neptune/src/pages.rs, which prints the page size.
      More investigation needs to be done to see whether this is a symptom specific
      to my system or not.

* A simple GC
Write a simple GC in Rust to see it work

- [0/3] Implementation
  - [x] Remove most of the code used internally in current GC 
  - [x] Write a simple allocator with no collection, piggybacking on Rust's
        memory allocator.
  - [ ] Write a simple mark and sweep garbage collector.
- [0/3] Testing
  - [ ] Write some unit tests on Rust side to check liveness.
        (according to Cargo's documentation, unit tests go in the file they're testing;
         integration tests can go in the 'tests' directory)
        (run with `cargo test`)
  - [ ] Test on Julia code with GC debug routines to make sure that the
        collection actually kicks in.
  - [ ] Test with valgrind to find memory leaks.
  - [ ] Basic tests that show we are actually passing to correct structs
        between the FFI

* Better allocator
Improve the allocator rather than relying on Rust's. *Test with testing
procedures above after each step*.

- [x] Use ~alloc::heap~ to write a page manager.
- [x] Switch to page manager for memory allocation.
- [x] Switch to a region-based page manager.
- [x] Switch to ~mmap~ and memory commit/de-commit for a more efficient and
      happier relationship with the OS. This part requires writing custom code for
      Windows if we plan to support it.

* Incremental GC
Make GC incremental on a single thread to find some of the bugs early.

- [ ] Update how write barriers work and add hooks exposed from GC.
- [ ] Update GC to do a minor mark or collection every once in a while.
- [ ] Update GC debug hooks.
- [ ] Testing for soundness.
- [ ] Testing for performance by measuring latency numbers.

* Concurrent GC
- [ ] Read concurrent GC papers.
- [ ] Design a concurrent /or/ parallel GC.
- [ ] TBD.

* Parallel GC
- [ ] Use a thread pool
- [ ] Distribute work among threads
- [ ] Add testing

* Benchmarking
TBD.

* Optimization (optional)
If we have time, do profiling with callgrind to find which steps of GC consume
most time to optimize for time. Also use GC statistics to optimize for latency
or throughput.
